/*
 * SafeTimer.cpp
 *
 *  Created on: Jun 26, 2012
 *      Author: root
 */

//
// Timer.cpp
//
// $Id: //poco/1.4/Foundation/src/Timer.cpp#1 $
//
// Library: Foundation
// Package: Threading
// Module:  Timer
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "Poco/Exception.h"
#include "Poco/ErrorHandler.h"
#include "TBS/Log.h"
#include "TBS/ThreadStatus.h"
#include "TBS/SafeTimer.h"

namespace TBS {

		SafeTimer::SafeTimer(std::string name, long startInterval, long periodicInterval)
				: _startInterval(startInterval), _periodicInterval(periodicInterval), _skipped(0), _pCallback(0), thread(name), _running(false) {
			poco_assert(startInterval >= 0 && periodicInterval >= 0);
		}

		SafeTimer::~SafeTimer() {
			stop();
		}

		void SafeTimer::start(const AbstractTimerCallback& method) {
			Poco::Timestamp nextInvocation;
			nextInvocation += _startInterval * 1000;

			poco_assert(!_pCallback);

			Poco::FastMutex::ScopedLock lock(_mutex);
			_nextInvocation = nextInvocation;
			_pCallback = method.clone();
			_wakeUp.reset();
			thread.start(*this);
			//threadPool.startWithPriority(priority, *this);
		}

		void SafeTimer::stop() {

			// to prevent multiple simultaneous calls from more threads
			static Poco::FastMutex fm;
			Poco::FastMutex::ScopedLock fml(fm);

			Poco::FastMutex::ScopedLock lock(_mutex);
			if (_pCallback) {
				_periodicInterval = 0;
				_mutex.unlock();
				_wakeUp.set();
				_done.wait(); // warning: deadlock if called from timer callback
				thread.join();
				_mutex.lock();
				delete _pCallback;
				_pCallback = 0;
			}
		}

		void SafeTimer::restart() {
			Poco::FastMutex::ScopedLock lock(_mutex);
			if (_pCallback) {
				_wakeUp.set();
			}
		}

		void SafeTimer::restart(long milliseconds) {
			poco_assert(milliseconds >= 0);
			Poco::FastMutex::ScopedLock lock(_mutex);
			if (_pCallback) {
				_periodicInterval = milliseconds;
				_wakeUp.set();
			}
		}

		long SafeTimer::getStartInterval() const {
			Poco::FastMutex::ScopedLock lock(_mutex);
			return _startInterval;
		}

		void SafeTimer::setStartInterval(long milliseconds) {
			poco_assert(milliseconds >= 0);
			Poco::FastMutex::ScopedLock lock(_mutex);
			_startInterval = milliseconds;
		}

		long SafeTimer::getPeriodicInterval() const {
			Poco::FastMutex::ScopedLock lock(_mutex);
			return _periodicInterval;
		}

		void SafeTimer::setPeriodicInterval(long milliseconds) {
			poco_assert(milliseconds >= 0);
			Poco::FastMutex::ScopedLock lock(_mutex);
			_periodicInterval = milliseconds;
		}

		void SafeTimer::run() {
			//THREAD_DUMP("timer start");

			threadDebug();
			LOG_STREAM_TRACE << "timer bg thread start"  << LOG_STREAM_END
			//Poco::Timestamp now;
			_running = true;
			long interval(0);
			{
				Poco::FastMutex::ScopedLock lock(_mutex);
				interval = _startInterval;
			}
			LOG_STREAM_TRACE << "first sleep " << interval  << LOG_STREAM_END
			do {

				if (!_wakeUp.tryWait(interval)) {
					try {
						LOG_STREAM_TRACE << "timer tick after " << interval << "ms"  << LOG_STREAM_END
						//THREAD_DUMP("timer tick");
						_pCallback->invoke(*this);
						//THREAD_DUMP("timer tick end");
					} catch (Poco::Exception& exc) {
						LOG_STREAM_TRACE << "timer tick exc " << exc.displayText() << LOG_STREAM_END
						Poco::ErrorHandler::handle(exc);
					} catch (std::exception& exc) {
						LOG_STREAM_TRACE << "timer tick exc " << exc.what() << LOG_STREAM_END
						Poco::ErrorHandler::handle(exc);
					} catch (...) {
						LOG_STREAM_TRACE << "timer tick error " << LOG_STREAM_END
						Poco::ErrorHandler::handle();
					}
				}
				{
					Poco::FastMutex::ScopedLock lock(_mutex);
					interval = _periodicInterval;
				}
				LOG_STREAM_TRACE << "timer tick new interval assigned to " << interval << "ms"  << LOG_STREAM_END
			} while (interval > 0);
			LOG_STREAM_TRACE << "timer stpped " << LOG_STREAM_END
			_done.set();
			LOG_STREAM_TRACE << "timer bg thread end"  << LOG_STREAM_END
			_running = false;
					//THREAD_DUMP("timer stopped");
		}

		long SafeTimer::skipped() const {
			return _skipped;
		}

		bool SafeTimer::isRunning() const {
			return _running;
		}

		AbstractTimerCallback::AbstractTimerCallback()
		{
		}


		AbstractTimerCallback::AbstractTimerCallback(const AbstractTimerCallback& callback)
		{
		}


		AbstractTimerCallback::~AbstractTimerCallback()
		{
		}


		AbstractTimerCallback& AbstractTimerCallback::operator = (const AbstractTimerCallback& callback)
		{
			return *this;
		}


}

