/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _HWIO_JSONCLIENT_H_
#define _HWIO_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "HWIO.h"


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
       class Services_JsonClient : public TBS::TSeries::Services::HWIO::IServices {
			public:
				typedef Poco::SharedPtr <Services_JsonClient> Ptr;
				
				Services_JsonClient(jsonrpc::AbstractClientConnector* param){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				Services_JsonClient(std::string server, int port){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(new jsonrpc::HttpInterfaceClient(TBS::TSeries::Services::HWIO::IServices::name(), server, port)));
				}
				virtual ~Services_JsonClient() {
				 }

				
				
 //methods 
				        std::vector< std::string > Available(){
            ::Json::Value p;
            p = ::Json::nullValue;
            return jsonrpc::Convertor::json2Cpp<std::vector< std::string > >(this->client->CallMethod("Available", p));
        }
        void Reload(){
            ::Json::Value p;
            p = ::Json::nullValue;
            this->client->CallNotification("Reload", p);
        }

				
 //signals 
				//TODO
				
		private: 
				std::auto_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
       class SmartController_JsonClient : public TBS::TSeries::Services::HWIO::ISmartController {
			public:
				typedef Poco::SharedPtr <SmartController_JsonClient> Ptr;
				
				SmartController_JsonClient(jsonrpc::AbstractClientConnector* param){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				SmartController_JsonClient(std::string server, int port){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(new jsonrpc::HttpInterfaceClient(TBS::TSeries::Services::HWIO::ISmartController::name(), server, port)));
				}
				virtual ~SmartController_JsonClient() {
				 }

				
				
 //methods 
				        void Relay1(const int32_t & timeout){
            ::Json::Value p;
            p["timeout"] = timeout; 

            this->client->CallNotification("Relay1", p);
        }
        void Relay2(const int32_t & timeout){
            ::Json::Value p;
            p["timeout"] = timeout; 

            this->client->CallNotification("Relay2", p);
        }
        void GPOut1(const int32_t & status){
            ::Json::Value p;
            p["status"] = status; 

            this->client->CallNotification("GPOut1", p);
        }
        void GPOut2(const int32_t & status){
            ::Json::Value p;
            p["status"] = status; 

            this->client->CallNotification("GPOut2", p);
        }
        int32_t GPIn1Value(){
            ::Json::Value p;
            p = ::Json::nullValue;
            return jsonrpc::Convertor::json2Cpp<int32_t >(this->client->CallMethod("GPIn1Value", p));
        }
        int32_t GPIn2Value(){
            ::Json::Value p;
            p = ::Json::nullValue;
            return jsonrpc::Convertor::json2Cpp<int32_t >(this->client->CallMethod("GPIn2Value", p));
        }

				
 //signals 
				//TODO
				
		private: 
				std::auto_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
       class InternalRelay_JsonClient : public TBS::TSeries::Services::HWIO::IInternalRelay {
			public:
				typedef Poco::SharedPtr <InternalRelay_JsonClient> Ptr;
				
				InternalRelay_JsonClient(jsonrpc::AbstractClientConnector* param){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				InternalRelay_JsonClient(std::string server, int port){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(new jsonrpc::HttpInterfaceClient(TBS::TSeries::Services::HWIO::IInternalRelay::name(), server, port)));
				}
				virtual ~InternalRelay_JsonClient() {
				 }

				
				
 //methods 
				        void Relay(const int32_t & timeoutMs){
            ::Json::Value p;
            p["timeoutMs"] = timeoutMs; 

            this->client->CallNotification("Relay", p);
        }

				
 //signals 
				//TODO
				
		private: 
				std::auto_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 
 } 



#endif //_HWIO_JSONCLIENT_H_

