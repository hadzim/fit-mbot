/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _HWIO_DBUSSERVER_H_
#define _HWIO_DBUSSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Delegate.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
///includes
#include "HWIO.h"


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
	class Services_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				Services_DBusServer(TBS::TSeries::Services::HWIO::IServices::Ptr impl) :
					::DBus::InterfaceAdaptor("com.TBS.TSeries.Services.HWIO.Services"), impl(impl){
								register_method(Services_DBusServer, Available, _Available_mstub);
		register_method(Services_DBusServer, Reload, _Reload_mstub);

				}
				virtual ~Services_DBusServer(){
						
				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/TBS/TSeries/Services/HWIO"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.TBS.TSeries.Services.HWIO.Services"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
				
			private:
					::DBus::Message _Available_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
		std::vector< std::string > _output = impl->Available();
		::DBus::ReturnMessage reply(call);
		::DBus::MessageIter wi = reply.writer();
		wi <<  _output;
		return reply;
	}
	::DBus::Message _Reload_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
impl->Reload();
		::DBus::ReturnMessage reply(call);
		return reply;
	}

				
				TBS::TSeries::Services::HWIO::IServices::Ptr impl;
};
 } 
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
	class SmartController_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				SmartController_DBusServer(TBS::TSeries::Services::HWIO::ISmartController::Ptr impl) :
					::DBus::InterfaceAdaptor("com.TBS.TSeries.Services.HWIO.SmartController"), impl(impl){
								impl->GPIn1Changed += Poco::delegate(this, &SmartController_DBusServer::handlerGPIn1Changed);
		impl->GPIn2Changed += Poco::delegate(this, &SmartController_DBusServer::handlerGPIn2Changed);
		register_method(SmartController_DBusServer, Relay1, _Relay1_mstub);
		register_method(SmartController_DBusServer, Relay2, _Relay2_mstub);
		register_method(SmartController_DBusServer, GPOut1, _GPOut1_mstub);
		register_method(SmartController_DBusServer, GPOut2, _GPOut2_mstub);
		register_method(SmartController_DBusServer, GPIn1Value, _GPIn1Value_mstub);
		register_method(SmartController_DBusServer, GPIn2Value, _GPIn2Value_mstub);

				}
				virtual ~SmartController_DBusServer(){
								impl->GPIn1Changed -= Poco::delegate(this, &SmartController_DBusServer::handlerGPIn1Changed);
		impl->GPIn2Changed -= Poco::delegate(this, &SmartController_DBusServer::handlerGPIn2Changed);

				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/TBS/TSeries/Services/HWIO"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.TBS.TSeries.Services.HWIO.SmartController"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
					void GPIn1Changed(const int32_t & value, const int32_t & oldvalue){
		::DBus::SignalMessage sig("GPIn1Changed");
		::DBus::MessageIter wi = sig.writer();
		wi << value;
		wi << oldvalue;
		emit_signal(sig);
	}
	void GPIn2Changed(const int32_t & value){
		::DBus::SignalMessage sig("GPIn2Changed");
		::DBus::MessageIter wi = sig.writer();
		wi << value;
		emit_signal(sig);
	}

			private:
					::DBus::Message _Relay1_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
		int32_t _timeout;
ri >> _timeout;
impl->Relay1(_timeout);
		::DBus::ReturnMessage reply(call);
		return reply;
	}
	::DBus::Message _Relay2_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
		int32_t _timeout;
ri >> _timeout;
impl->Relay2(_timeout);
		::DBus::ReturnMessage reply(call);
		return reply;
	}
	::DBus::Message _GPOut1_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
		int32_t _status;
ri >> _status;
impl->GPOut1(_status);
		::DBus::ReturnMessage reply(call);
		return reply;
	}
	::DBus::Message _GPOut2_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
		int32_t _status;
ri >> _status;
impl->GPOut2(_status);
		::DBus::ReturnMessage reply(call);
		return reply;
	}
	::DBus::Message _GPIn1Value_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
		int32_t _status = impl->GPIn1Value();
		::DBus::ReturnMessage reply(call);
		::DBus::MessageIter wi = reply.writer();
		wi <<  _status;
		return reply;
	}
	::DBus::Message _GPIn2Value_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
		int32_t _status = impl->GPIn2Value();
		::DBus::ReturnMessage reply(call);
		::DBus::MessageIter wi = reply.writer();
		wi <<  _status;
		return reply;
	}

						void handlerGPIn1Changed(TBS::TSeries::Services::HWIO::ISmartController::GPIn1ChangedArg & arg){
			this->GPIn1Changed(arg.value, arg.oldvalue);
		}
		void handlerGPIn2Changed(TBS::TSeries::Services::HWIO::ISmartController::GPIn2ChangedArg & arg){
			this->GPIn2Changed(arg);
		}

				TBS::TSeries::Services::HWIO::ISmartController::Ptr impl;
};
 } 
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
	class InternalRelay_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				InternalRelay_DBusServer(TBS::TSeries::Services::HWIO::IInternalRelay::Ptr impl) :
					::DBus::InterfaceAdaptor("com.TBS.TSeries.Services.HWIO.InternalRelay"), impl(impl){
								register_method(InternalRelay_DBusServer, Relay, _Relay_mstub);

				}
				virtual ~InternalRelay_DBusServer(){
						
				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/TBS/TSeries/Services/HWIO"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.TBS.TSeries.Services.HWIO.InternalRelay"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
				
			private:
					::DBus::Message _Relay_mstub(const ::DBus::CallMessage &call){
		::DBus::MessageIter ri = call.reader();
		int32_t _timeoutMs;
ri >> _timeoutMs;
impl->Relay(_timeoutMs);
		::DBus::ReturnMessage reply(call);
		return reply;
	}

				
				TBS::TSeries::Services::HWIO::IInternalRelay::Ptr impl;
};
 } 
 } 
 } 
 } 
 } 



#endif //_HWIO_DBUSSERVER_H_

