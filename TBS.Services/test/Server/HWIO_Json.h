/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _HWIO_JSONSERVER_H_
#define _HWIO_JSONSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "HWIO.h"


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
	class Services_JsonServer : public jsonrpc::AbstractServerInterface<Services_JsonServer>
		{
			public:
				Services_JsonServer(jsonrpc::ServiceHandlers & handlers, TBS::TSeries::Services::HWIO::IServices::Ptr interfaceImpl) :
					jsonrpc::AbstractServerInterface<Services_JsonServer>("TBS.TSeries.Services.HWIO.Services", handlers), interfaceImpl(interfaceImpl) 
					{
						            this->bindAndAddMethod(new jsonrpc::Procedure("Available", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_ARRAY,  NULL), &Services_JsonServer::AvailableI);
            this->bindAndAddNotification(new jsonrpc::Procedure("Reload", jsonrpc::PARAMS_BY_NAME,  NULL), &Services_JsonServer::ReloadI);

					}
					
					        inline virtual void AvailableI(const ::Json::Value& request, ::Json::Value& response) 
        {
            response = jsonrpc::Convertor::cpp2Json< std::vector< std::string > >(this->Available());
        }

        inline virtual void ReloadI(const ::Json::Value& request) 
        {
            this->Reload();
        }


					        std::vector< std::string > Available(){
        	return interfaceImpl->Available();
        }

        void Reload(){
        	 interfaceImpl->Reload();
        }


			private:
				TBS::TSeries::Services::HWIO::IServices::Ptr interfaceImpl;
};
 } 
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
	class SmartController_JsonServer : public jsonrpc::AbstractServerInterface<SmartController_JsonServer>
		{
			public:
				SmartController_JsonServer(jsonrpc::ServiceHandlers & handlers, TBS::TSeries::Services::HWIO::ISmartController::Ptr interfaceImpl) :
					jsonrpc::AbstractServerInterface<SmartController_JsonServer>("TBS.TSeries.Services.HWIO.SmartController", handlers), interfaceImpl(interfaceImpl) 
					{
						            this->bindAndAddNotification(new jsonrpc::Procedure("Relay1", jsonrpc::PARAMS_BY_NAME, "timeout",jsonrpc::JSON_INTEGER, NULL), &SmartController_JsonServer::Relay1I);
            this->bindAndAddNotification(new jsonrpc::Procedure("Relay2", jsonrpc::PARAMS_BY_NAME, "timeout",jsonrpc::JSON_INTEGER, NULL), &SmartController_JsonServer::Relay2I);
            this->bindAndAddNotification(new jsonrpc::Procedure("GPOut1", jsonrpc::PARAMS_BY_NAME, "status",jsonrpc::JSON_INTEGER, NULL), &SmartController_JsonServer::GPOut1I);
            this->bindAndAddNotification(new jsonrpc::Procedure("GPOut2", jsonrpc::PARAMS_BY_NAME, "status",jsonrpc::JSON_INTEGER, NULL), &SmartController_JsonServer::GPOut2I);
            this->bindAndAddMethod(new jsonrpc::Procedure("GPIn1Value", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &SmartController_JsonServer::GPIn1ValueI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GPIn2Value", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &SmartController_JsonServer::GPIn2ValueI);

					}
					
					        inline virtual void Relay1I(const ::Json::Value& request) 
        {
            this->Relay1(jsonrpc::Convertor::json2Cpp< int32_t >(request["timeout"]));
        }

        inline virtual void Relay2I(const ::Json::Value& request) 
        {
            this->Relay2(jsonrpc::Convertor::json2Cpp< int32_t >(request["timeout"]));
        }

        inline virtual void GPOut1I(const ::Json::Value& request) 
        {
            this->GPOut1(jsonrpc::Convertor::json2Cpp< int32_t >(request["status"]));
        }

        inline virtual void GPOut2I(const ::Json::Value& request) 
        {
            this->GPOut2(jsonrpc::Convertor::json2Cpp< int32_t >(request["status"]));
        }

        inline virtual void GPIn1ValueI(const ::Json::Value& request, ::Json::Value& response) 
        {
            response = jsonrpc::Convertor::cpp2Json< int32_t >(this->GPIn1Value());
        }

        inline virtual void GPIn2ValueI(const ::Json::Value& request, ::Json::Value& response) 
        {
            response = jsonrpc::Convertor::cpp2Json< int32_t >(this->GPIn2Value());
        }


					        void Relay1(const int32_t & timeout){
        	 interfaceImpl->Relay1(timeout);
        }

        void Relay2(const int32_t & timeout){
        	 interfaceImpl->Relay2(timeout);
        }

        void GPOut1(const int32_t & status){
        	 interfaceImpl->GPOut1(status);
        }

        void GPOut2(const int32_t & status){
        	 interfaceImpl->GPOut2(status);
        }

        int32_t GPIn1Value(){
        	return interfaceImpl->GPIn1Value();
        }

        int32_t GPIn2Value(){
        	return interfaceImpl->GPIn2Value();
        }


			private:
				TBS::TSeries::Services::HWIO::ISmartController::Ptr interfaceImpl;
};
 } 
 } 
 } 
 } 
 } 


namespace TBS { 
	namespace TSeries { 
		namespace Services { 
			namespace HWIO { 
				namespace Stub { 
	class InternalRelay_JsonServer : public jsonrpc::AbstractServerInterface<InternalRelay_JsonServer>
		{
			public:
				InternalRelay_JsonServer(jsonrpc::ServiceHandlers & handlers, TBS::TSeries::Services::HWIO::IInternalRelay::Ptr interfaceImpl) :
					jsonrpc::AbstractServerInterface<InternalRelay_JsonServer>("TBS.TSeries.Services.HWIO.InternalRelay", handlers), interfaceImpl(interfaceImpl) 
					{
						            this->bindAndAddNotification(new jsonrpc::Procedure("Relay", jsonrpc::PARAMS_BY_NAME, "timeoutMs",jsonrpc::JSON_INTEGER, NULL), &InternalRelay_JsonServer::RelayI);

					}
					
					        inline virtual void RelayI(const ::Json::Value& request) 
        {
            this->Relay(jsonrpc::Convertor::json2Cpp< int32_t >(request["timeoutMs"]));
        }


					        void Relay(const int32_t & timeoutMs){
        	 interfaceImpl->Relay(timeoutMs);
        }


			private:
				TBS::TSeries::Services::HWIO::IInternalRelay::Ptr interfaceImpl;
};
 } 
 } 
 } 
 } 
 } 



#endif //_HWIO_JSONSERVER_H_

