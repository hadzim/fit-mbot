#ifndef SERVERTEMPLATE_H
#define SERVERTEMPLATE_H

#define TEMPLATE_CLASS "\
<namespaceStart>\
	class <className> : public jsonrpc::AbstractServerInterface<<className>>\n\
		{\n\
			public:\n\
				<className>(jsonrpc::ServiceHandlers & handlers, <interface>::Ptr interfaceImpl) :\n\
					jsonrpc::AbstractServerInterface<<className>>(\"<interfaceName>\", handlers), interfaceImpl(interfaceImpl) \n\
					{\n\
						<procedureBindings>\n\
					}\n\
					\n\
					<procedureDefinitions>\n\
					<abstractDefinitions>\n\
			private:\n\
				<interface>::Ptr interfaceImpl;\n\
};\n\
<namespaceEnd>\n\
\n"


#define TEMPLATE_SERVER_STUB "\
/**\n\
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!\n\
 */\n\
#ifndef _<STUBNAME>_JSONSERVER_H_\n\
#define _<STUBNAME>_JSONSERVER_H_\n\
\n\
#include <Poco/SharedPtr.h>\n\
#include <Poco/BasicEvent.h>\n\
#include <string>\n\
#include <vector>\n\
#include <map>\n\
#include <memory>\n\
#include <jsonrpc/rpc.h>\n\
///includes\n\
<includes>\n\
\n\
\n\
<classes>\n\
#endif //_<STUBNAME>_JSONSERVER_H_\n\
"

#define TEMPLATE_SERVER_METHODBINDING "\
            this->bindAndAddMethod(new jsonrpc::Procedure(\"<procedureName>\", <paramType>, <returnType>, <parameterList> NULL), &<className>::<procedureName>I);"

#define TEMPLATE_SERVER_NOTIFICATIONBINDING "\
            this->bindAndAddNotification(new jsonrpc::Procedure(\"<procedureName>\", <paramType>, <parameterList> NULL), &<className>::<procedureName>I);"

#define TEMPLATE_SERVER_EMPTYMETHODBINDING "\
            this->bindAndAddMethod(new jsonrpc::Procedure(\"<procedureName>\", <paramType>, jsonrpc::JSON_NULL, <parameterList> NULL), &<className>::<procedureName>I);"


#define TEMPLATE_SERVER_METHODDEFINITION "\
        inline virtual void <procedureName>I(const ::Json::Value& request, ::Json::Value& response) \n\
        {\n\
            response = jsonrpc::Convertor::cpp2Json< <returnType> >(this-><procedureName>(<parameterMapping>));\n\
        }\n\
"

#define TEMPLATE_SERVER_EMPTYMETHODDEFINITION "\
        inline virtual void <procedureName>I(const ::Json::Value& request, ::Json::Value& response) \n\
        {\n\
            this-><procedureName>(<parameterMapping>);\n\
        }\n\
"

#define TEMPLATE_SERVER_OUTMETHODDEFINITION "\
        inline virtual void <procedureName>I(const ::Json::Value& request, ::Json::Value& response) \n\
        {\n\
        	<outputParams>\n\
        	this-><procedureName>(<parameterMapping>);\n\
        	<responseAssign>\n\
        }\n\
"


#define TEMPLATE_SERVER_NOTIFICAITONDEFINITION "\
        inline virtual void <procedureName>I(const ::Json::Value& request) \n\
        {\n\
            this-><procedureName>(<parameterMapping>);\n\
        }\n\
"

#define TEMPLATE_SERVER_ABSTRACTDEFINITION "\
        <returnType> <methodName>(<parameters>){\n\
        	<returnStatement> interfaceImpl-><methodName>(<parameterValues>);\n\
        }\n\
"

#endif // SERVERTEMPLATE_H
