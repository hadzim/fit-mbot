#ifndef SERVERTEMPLATE_H
#define SERVERTEMPLATE_H

#define TEMPLATE_CLASS "\
<namespaceStart>\
	class <className> : public ::DBus::InterfaceAdaptor\n\
		{\n\
			public:\n\
				<className>(<interface>::Ptr impl) :\n\
					::DBus::InterfaceAdaptor(\"<dbusname>\"), impl(impl){\n\
						<binding>\n\
				}\n\
				virtual ~<className>(){\n\
						<unbinding>\n\
				}\n\
				\n\
				static const std::string & dbuspath(){ static std::string val = \"<dbuspath>\"; return val; }\n\
				static const std::string & dbusname(){ static std::string val = \"<dbusname>\"; return val; }\n\
                \n\
                //::DBus::IntrospectedInterface *introspect() const {\n\
				//	<introspection>\n\
				//}\n\
				\n\
				<signals>\n\
			private:\n\
				<methods>\n\
				<handlers>\n\
				<interface>::Ptr impl;\n\
};\n\
<namespaceEnd>\n\
\n"


#define TEMPLATE_SERVER_STUB "\
/**\n\
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!\n\
 */\n\
 #ifndef _NO_DBUS \n\
#ifndef _<STUBNAME>_DBUSSERVER_H_\n\
#define _<STUBNAME>_DBUSSERVER_H_\n\
\n\
#include <Poco/SharedPtr.h>\n\
#include <Poco/BasicEvent.h>\n\
#include <Poco/Delegate.h>\n\
#include <Poco/Exception.h>\n\
#include <string>\n\
#include <vector>\n\
#include <map>\n\
#include <memory>\n\
#include <dbus-c++/dbus.h>\n\
#include <dbus/dbus-protocol.h>\n\
///includes\n\
<includes>\n\
\n\
\n\
<classes>\n\
#endif //_<STUBNAME>_DBUSSERVER_H_\n\
#endif \n\
"



#endif // SERVERTEMPLATE_H
