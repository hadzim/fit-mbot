//
// Channel.h
//
// $Id: //poco/svn/Foundation/include/Poco/Channel.h#2 $
//
// Library: Foundation
// Package: DeviceIO
// Module:  Channel
//
// Definition of the Channel class.
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef DeviceIO_Channel_INCLUDED
#define DeviceIO_Channel_INCLUDED


#include "Poco/DeviceIO/DeviceIO.h"
#include "Poco/DeviceIO/ChannelConfig.h"
#include "Poco/RefCountedObject.h"
#include "Poco/AutoPtr.h"


namespace Poco {
namespace DeviceIO {


class DeviceIO_API Channel: public RefCountedObject
	/// Channel supports I/O operations on streams or other input/output facilities.
	///
	/// Channel supports blocking (default) and non-blocking read and write operations.
{
public:
	typedef AutoPtr<ChannelConfig> ConfigPtr;

	Channel(const std::string& name = "");
		/// Creates the Channel.

	Channel(ChannelConfig* pConfig, const std::string& name = "");
		/// Creates the Channel with specified configuration.
		
	virtual ~Channel();
		/// Destroys the Channel.

	virtual void open() = 0;
		/// Opens the channel.

	virtual void close() = 0;
		/// Closes the channel.

	std::string& read(std::string& buffer, int length = 0);
		/// Read up to length bytes into the supplied buffer.
		/// If length is 0, the channel implementation must provide
		/// support for the termination of transmission.
		/// Also, in case when length is 0 and the channel implementation
		/// provides the buffer length and termination character
		/// information, it also allocates the buffer. The buffer,
		/// however, is always freed in this function, regardless of where
		/// it was allocated. See readData(char*&) for more information.

	const std::string& read(int length);
		/// Read up to length bytes and return the reference to internal buffer. 

	int read(char* pReadBuf, int length);
		/// Reads a string of characters from the channel.

	int write(char c);
		/// Writes a character to the channel.

	int write(const char* buffer, int length);
		/// Write length bytes from buffer. 
		/// Returns the number of bytes written.
		
	int write(const std::string& data);
		/// Writes a string of characters to the channel.

	char read();
		/// Reads one character from the channel.

	const std::string& name() const;
		/// Returns the channel name.

	virtual void setTimeout(int timeoutMS);
		/// Sets timeout in milliseconds.

	virtual void setBlocking();
		/// Sets blocking operation.

	virtual void setNonblocking(int timeoutMS);
		/// Sets non-blocking operation by calling setTimeout().

	int getTimeout() const;
		/// Returns timeout in milliseconds.

	bool isBlocking() const;
		/// Returns true if operation is blocking, false otherwise.

protected:
	ChannelConfig& config();
		/// Returns the reference to the configuration for this channel.

	virtual void init();
		/// (Re)initializes the internal channel configuration.
		/// Does nothing in this implementation.

	virtual int readData(char* pReadBuf, int length) = 0;
		/// Reads length bytes and puts them in the buffer.
		/// Must be implemented by the inheriting class.

	virtual int readData(char*& pReadBuf) = 0;
		/// Reads an unspecified amount of bytes and places them in the buffer.
		/// Properly behaved implementation of this function reads bytes and places 
		/// them in the buffer. Buffer is allocated by the implementation as
		/// needed. Implementation must provide a way to terminate the communication
		/// session.
		/// Important: this function is called from read(std::string, int length) when 
		/// the length is zero. The buffer allocated in the implementation of this function
		/// is always freed in the caller function.
		
	virtual int writeData(const char* buffer, int length) = 0;
		/// Writes length bytes from buffer to the target.
		/// Must be implemented by the inheriting class.

private:
	Channel(const Channel&);
	Channel& operator = (const Channel&);

	std::string _name;
	std::string _buffer;
	ConfigPtr   _pConfig;
};


//
// inlines
//

inline ChannelConfig& Channel::config()
{
	return *_pConfig;
}


inline void Channel::init()
{
}


inline const std::string& Channel::name() const
{
	return _name;
}


inline const std::string& Channel::read(int length)
{
	return read(_buffer, length);
}


inline int Channel::read(char* pReadBuf, int length)
{
	return readData(pReadBuf, length);
}


inline int Channel::write(char c)
{
	return writeData(&c, 1);
}


inline int Channel::write(const std::string& data)
{
	return writeData(data.data(), static_cast<int>(data.size()));
}


inline int Channel::write(const char* buffer, int length)
{
	return writeData(buffer, length);
}


inline void Channel::setTimeout(int timeoutMS)
{
	_pConfig->setTimeout(timeoutMS);
}


inline void Channel::setBlocking()
{
	_pConfig->setBlocking();
}


inline void Channel::setNonblocking(int timeoutMS)
{
	setTimeout(timeoutMS);
}


inline int Channel::getTimeout() const
{
	return _pConfig->getTimeout();
}


inline bool Channel::isBlocking() const
{
	return _pConfig->isBlocking();
}


} } // namespace Poco::DeviceIO


#endif // DeviceIO_Channel_INCLUDED
