//
// ProtocolStream.h
//
// $Id: //poco/1.2/DeviceIO/include/Poco/DeviceIO/ProtocolStream.h#1 $
//
// Library: DeviceIO
// Package: Protocol
// Module:  ProtocolStream
//
// Definition of the ProtocolStream class.
//
// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef DeviceIO_ProtocolStream_INCLUDED
#define DeviceIO_ProtocolStream_INCLUDED


#include "Poco/DeviceIO/DeviceIO.h"
#include "Poco/DeviceIO/Protocol.h"
//#include "Poco/DeviceIO/Channel.h"
#include "Poco/BufferedBidirectionalStreamBuf.h"
#include <istream>
#include <ostream>


namespace Poco {
namespace DeviceIO {


class DeviceIO_API ProtocolStreamBuf: public Poco::BufferedBidirectionalStreamBuf
	/// This is the streambuf class used for reading from and writing to a channel using a protocol.
{
public:
	ProtocolStreamBuf(Protocol* protocol);
		/// Creates a ProtocolStreamBuf with the given protocol.

	~ProtocolStreamBuf();
		/// Destroys the ProtocolStreamBuf.
	
protected:
	int readFromDevice(char* buffer, std::streamsize length);

	int writeToDevice(const char* buffer, std::streamsize length);

private:
	enum 
	{
		STREAM_BUFFER_SIZE = 1024
	};

	Protocol* _pProtocol;
};


class DeviceIO_API ProtocolIOS: public virtual std::ios
	/// The base class for ProtocolStream, ProtocolInputStream and
	/// ProtocolOutputStream.
	///
	/// This class is needed to ensure the correct initialization
	/// order of the stream buffer and base classes.
{
public:
	ProtocolIOS(Protocol* protocol);
		/// Creates the ProtocolIOS with the given protocol.
		///
		/// The protocol's ProtocolImpl must be a StreamProtocolImpl,
		/// otherwise an InvalidArgumentException is thrown.

	~ProtocolIOS();
		/// Destroys the ProtocolIOS.

	ProtocolStreamBuf* rdbuf();
		/// Returns a pointer to the internal ProtocolStreamBuf.

	void close();
		/// Flushes the stream and closes the protocol.

protected:
	ProtocolStreamBuf _buf;
};


class DeviceIO_API ProtocolOutputStream: public ProtocolIOS, public std::ostream
	/// An output stream for writing to a protocol.
{
public:
	ProtocolOutputStream(Protocol* pProtocol);
		/// Creates the ProtocolOutputStream with the given protocol.

	~ProtocolOutputStream();
		/// Destroys the ProtocolOutputStream.
};


class DeviceIO_API ProtocolInputStream: public ProtocolIOS, public std::istream
	/// An input stream for reading from a protocol.
	///
	/// When using formatted input from a ProtocolInputStream,
	/// always ensure that a receive timeout is set for the
	/// protocol. Otherwise your program might unexpectedly
	/// hang.
	///
	/// However, using formatted input from a ProtocolInputStream
	/// is not recommended, due to the read-ahead behavior of
	/// istream with formatted reads.
{
public:
	ProtocolInputStream(Protocol* pProtocol);
		/// Creates the ProtocolInputStream with the given protocol.

	~ProtocolInputStream();
		/// Destroys the ProtocolInputStream.
};


class DeviceIO_API ProtocolStream: public ProtocolIOS, public std::iostream
	/// An bidirectional stream for reading from and writing to a protocol.
	///
	/// When using formatted input from a ProtocolStream,
	/// always ensure that a receive timeout is set for the
	/// protocol. Otherwise your program might unexpectedly
	/// hang.
	///
	/// However, using formatted input from a ProtocolStream
	/// is not recommended, due to the read-ahead behavior of
	/// istream with formatted reads.
{
public:
	ProtocolStream(Protocol* pProtocol);
		/// Creates the ProtocolStream with the given protocol.

	~ProtocolStream();
		/// Destroys the ProtocolStream.
};


} } // namespace Poco::DeviceIO


#endif // DeviceIO_ProtocolStream_INCLUDED
