//
// ChannelConfig.h
//
// $Id: //poco/Main/Data/include/Poco/ChannelConfig.h#1 $
//
// Library: Foundation
// Package: DeviceIO
// Module:  ChannelConfig
//
// Definition of the ChannelConfig class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef DeviceIO_ChannelConfig_INCLUDED
#define DeviceIO_ChannelConfig_INCLUDED


#include "Poco/DeviceIO/DeviceIO.h"
#include "Poco/RefCountedObject.h"


namespace Poco {
namespace DeviceIO {


class DeviceIO_API ChannelConfig: virtual public Poco::RefCountedObject
{
public:
	enum ChannelType
	{
		CONNECTION_CHANNEL,
		CONNECTIONLESS_CHANNEL
	};

	ChannelConfig(const std::string& name = "",
		ChannelType type = CONNECTION_CHANNEL,
		int timeoutMS = INFINITE_TIMEOUT);
		/// Creates ChannelConfig.

	virtual ~ChannelConfig();
		/// Destroys ChannelConfig.

	virtual void setTimeout(int timeoutMS);
		/// Sets timeout in milliseconds.

	int getTimeout() const;
		/// Returns timeout in milliseconds.

	virtual void setBlocking();
		/// Sets blocking operation.

	virtual void setNonblocking(int timeoutMS);
		/// Sets blocking operation.

	bool isBlocking() const;
		/// Returns true if operation is blocking, false otherwise.

	void setName(const std::string& name);
		/// Sets the channel name.

	const std::string& getName() const;
		/// Returns the channel name.

	void setType(ChannelType type);
		/// Sets the channel name.

	ChannelType getType() const;
		/// Returns the channel name.

	static const int INFINITE_TIMEOUT = -1;

private:
	std::string _name;
	ChannelType _type;
	int         _timeoutMS;
};


//
// inlines
//

inline void ChannelConfig::setBlocking()
{
	_timeoutMS = INFINITE_TIMEOUT;
}


inline void ChannelConfig::setNonblocking(int timeoutMS)
{
	_timeoutMS = timeoutMS;
}


inline int ChannelConfig::getTimeout() const
{
	return _timeoutMS;
}


inline bool ChannelConfig::isBlocking() const
{
	return INFINITE_TIMEOUT == _timeoutMS;
}


inline void ChannelConfig::setName(const std::string& name)
{
	_name = name;
}


inline const std::string& ChannelConfig::getName() const
{
	return _name;
}


inline void ChannelConfig::setType(ChannelType type)
{
	_type = type;
}


inline ChannelConfig::ChannelType ChannelConfig::getType() const
{
	return _type;
}


} } // namespace Poco::DeviceIO


#endif // DeviceIO_ChannelConfig_INCLUDED
