/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
 #ifndef _NO_DBUS 
#ifndef _MOVEMENT_DBUSSERVER_H_
#define _MOVEMENT_DBUSSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Delegate.h>
#include <Poco/Exception.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
#include <dbus/dbus-protocol.h>
///includes
#include "HAL/API/Movement.h"


namespace HAL { 
	namespace API { 
		namespace Stub { 
	class Movement_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				Movement_DBusServer(HAL::API::IMovement::Ptr impl) :
					::DBus::InterfaceAdaptor("com.HAL.API.Movement"), impl(impl){
								impl->StatusChanged += Poco::delegate(this, &Movement_DBusServer::handlerStatusChanged);
		register_method(Movement_DBusServer, Move, _Move_mstub);
		register_method(Movement_DBusServer, Stop, _Stop_mstub);
		register_method(Movement_DBusServer, SetPosition, _SetPosition_mstub);
		register_method(Movement_DBusServer, GetStatus, _GetStatus_mstub);

				}
				virtual ~Movement_DBusServer(){
								impl->StatusChanged -= Poco::delegate(this, &Movement_DBusServer::handlerStatusChanged);

				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/HAL/API"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.HAL.API.Movement"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
					void StatusChanged(const double & speedLeft, const double & speedRight, const int64_t & posLeft, const int64_t & posRight){
		::DBus::SignalMessage sig("StatusChanged");
		::DBus::MessageIter wi = sig.writer();
		wi << speedLeft;
		wi << speedRight;
		wi << posLeft;
		wi << posRight;
		emit_signal(sig);
	}

			private:
					::DBus::Message _Move_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		double _speedLeft;
ri >> _speedLeft;
		double _speedRight;
ri >> _speedRight;
impl->Move(_speedLeft, _speedRight);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _Stop_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->Stop();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _SetPosition_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		int64_t _posLeft;
ri >> _posLeft;
		int64_t _posRight;
ri >> _posRight;
impl->SetPosition(_posLeft, _posRight);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GetStatus_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
		double _speedLeft;
		double _speedRight;
		int64_t _posLeft;
		int64_t _posRight;
impl->GetStatus(_speedLeft, _speedRight, _posLeft, _posRight);
		::DBus::ReturnMessage reply(call);
		::DBus::MessageIter wi = reply.writer();
		wi <<  _speedLeft;
		wi <<  _speedRight;
		wi <<  _posLeft;
		wi <<  _posRight;
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}

						void handlerStatusChanged(HAL::API::IMovement::StatusChangedArg & arg){
			this->StatusChanged(arg.speedLeft, arg.speedRight, arg.posLeft, arg.posRight);
		}

				HAL::API::IMovement::Ptr impl;
};
 } 
 } 
 } 



#endif //_MOVEMENT_DBUSSERVER_H_
#endif 

