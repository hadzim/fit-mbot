/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _REMOTE_JSONSERVER_H_
#define _REMOTE_JSONSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "HAL/API/Remote.h"


namespace HAL { 
	namespace Remote { 
		namespace Stub { 
	class Movement_JsonServer : public jsonrpc::AbstractServerInterface<Movement_JsonServer>
		{
			public:
				Movement_JsonServer(jsonrpc::ServiceHandlers & handlers, HAL::Remote::IMovement::Ptr interfaceImpl) :
					jsonrpc::AbstractServerInterface<Movement_JsonServer>("HAL.Remote.Movement", handlers), interfaceImpl(interfaceImpl) 
					{
						            this->bindAndAddMethod(new jsonrpc::Procedure("Move", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL, "speedLeft",jsonrpc::JSON_REAL,"speedRight",jsonrpc::JSON_REAL, NULL), &Movement_JsonServer::MoveI);
            this->bindAndAddMethod(new jsonrpc::Procedure("Stop", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL,  NULL), &Movement_JsonServer::StopI);

					}
					
					        inline virtual void MoveI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->Move(jsonrpc::Convertor::json2Cpp< double >(request["speedLeft"]), jsonrpc::Convertor::json2Cpp< double >(request["speedRight"]));
        }

        inline virtual void StopI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->Stop();
        }


					        void Move(const double & speedLeft, const double & speedRight){
        	 interfaceImpl->Move(speedLeft, speedRight);
        }

        void Stop(){
        	 interfaceImpl->Stop();
        }


			private:
				HAL::Remote::IMovement::Ptr interfaceImpl;
};
 } 
 } 
 } 



#endif //_REMOTE_JSONSERVER_H_

