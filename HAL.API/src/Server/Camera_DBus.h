/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
 #ifndef _NO_DBUS 
#ifndef _CAMERA_DBUSSERVER_H_
#define _CAMERA_DBUSSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Delegate.h>
#include <Poco/Exception.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
#include <dbus/dbus-protocol.h>
///includes
#include "HAL/API/Camera.h"


namespace HAL { 
	namespace API { 
		namespace Camera { 
			namespace Stub { 
	class Camera_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				Camera_DBusServer(HAL::API::Camera::ICamera::Ptr impl) :
					::DBus::InterfaceAdaptor("com.HAL.API.Camera.Camera"), impl(impl){
								register_method(Camera_DBusServer, Enable, _Enable_mstub);
		register_method(Camera_DBusServer, Disable, _Disable_mstub);
		register_method(Camera_DBusServer, GoMinEngine, _GoMinEngine_mstub);
		register_method(Camera_DBusServer, GoMaxEngine, _GoMaxEngine_mstub);
		register_method(Camera_DBusServer, GoRelEngine, _GoRelEngine_mstub);
		register_method(Camera_DBusServer, GoMinServo1, _GoMinServo1_mstub);
		register_method(Camera_DBusServer, GoMaxServo1, _GoMaxServo1_mstub);
		register_method(Camera_DBusServer, GoRelServo1, _GoRelServo1_mstub);
		register_method(Camera_DBusServer, GoMinServo2, _GoMinServo2_mstub);
		register_method(Camera_DBusServer, GoMaxServo2, _GoMaxServo2_mstub);
		register_method(Camera_DBusServer, GoRelServo2, _GoRelServo2_mstub);

				}
				virtual ~Camera_DBusServer(){
						
				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/HAL/API/Camera"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.HAL.API.Camera.Camera"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
				
			private:
					::DBus::Message _Enable_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->Enable();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _Disable_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->Disable();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMinEngine_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMinEngine();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMaxEngine_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMaxEngine();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoRelEngine_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		double _speed;
ri >> _speed;
impl->GoRelEngine(_speed);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMinServo1_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMinServo1();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMaxServo1_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMaxServo1();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoRelServo1_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		double _speed;
ri >> _speed;
impl->GoRelServo1(_speed);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMinServo2_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMinServo2();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMaxServo2_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMaxServo2();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoRelServo2_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		double _speed;
ri >> _speed;
impl->GoRelServo2(_speed);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}

				
				HAL::API::Camera::ICamera::Ptr impl;
};
 } 
 } 
 } 
 } 



#endif //_CAMERA_DBUSSERVER_H_
#endif 

