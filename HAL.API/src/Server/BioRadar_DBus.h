/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
 #ifndef _NO_DBUS 
#ifndef _BIORADAR_DBUSSERVER_H_
#define _BIORADAR_DBUSSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Delegate.h>
#include <Poco/Exception.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
#include <dbus/dbus-protocol.h>
///includes
#include "HAL/API/BioRadar.h"


namespace HAL { 
	namespace API { 
		namespace BioRadar { 
			namespace Stub { 
	class BioRadar_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				BioRadar_DBusServer(HAL::API::BioRadar::IBioRadar::Ptr impl) :
					::DBus::InterfaceAdaptor("com.HAL.API.BioRadar.BioRadar"), impl(impl){
								register_method(BioRadar_DBusServer, Enable, _Enable_mstub);
		register_method(BioRadar_DBusServer, Disable, _Disable_mstub);
		register_method(BioRadar_DBusServer, GoMinBase, _GoMinBase_mstub);
		register_method(BioRadar_DBusServer, GoMaxBase, _GoMaxBase_mstub);
		register_method(BioRadar_DBusServer, GoRelBase, _GoRelBase_mstub);
		register_method(BioRadar_DBusServer, GoMinAntenna, _GoMinAntenna_mstub);
		register_method(BioRadar_DBusServer, GoMaxAntenna, _GoMaxAntenna_mstub);
		register_method(BioRadar_DBusServer, GoRelAntenna, _GoRelAntenna_mstub);
		register_method(BioRadar_DBusServer, GetMotorStatus, _GetMotorStatus_mstub);
		register_method(BioRadar_DBusServer, GetAntenaStatus, _GetAntenaStatus_mstub);

				}
				virtual ~BioRadar_DBusServer(){
						
				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/HAL/API/BioRadar"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.HAL.API.BioRadar.BioRadar"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
				
			private:
					::DBus::Message _Enable_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->Enable();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _Disable_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->Disable();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMinBase_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMinBase();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMaxBase_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMaxBase();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoRelBase_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		double _speed;
ri >> _speed;
impl->GoRelBase(_speed);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMinAntenna_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMinAntenna();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMaxAntenna_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMaxAntenna();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoRelAntenna_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		double _speed;
ri >> _speed;
impl->GoRelAntenna(_speed);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GetMotorStatus_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		bool _isBase;
ri >> _isBase;
		bool _touchMin;
		bool _touchMax;
		double _position;
		bool _positionError;
impl->GetMotorStatus(_isBase, _touchMin, _touchMax, _position, _positionError);
		::DBus::ReturnMessage reply(call);
		::DBus::MessageIter wi = reply.writer();
		wi <<  _touchMin;
		wi <<  _touchMax;
		wi <<  _position;
		wi <<  _positionError;
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GetAntenaStatus_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
		std::vector< TBS::Services::Tuple< bool, int32_t > > _antenaSensors = impl->GetAntenaStatus();
		::DBus::ReturnMessage reply(call);
		::DBus::MessageIter wi = reply.writer();
		wi <<  _antenaSensors;
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}

				
				HAL::API::BioRadar::IBioRadar::Ptr impl;
};
 } 
 } 
 } 
 } 



#endif //_BIORADAR_DBUSSERVER_H_
#endif 

