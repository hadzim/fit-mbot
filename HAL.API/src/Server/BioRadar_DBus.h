/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
 #ifndef _NO_DBUS 
#ifndef _BIORADAR_DBUSSERVER_H_
#define _BIORADAR_DBUSSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Delegate.h>
#include <Poco/Exception.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
#include <dbus/dbus-protocol.h>
///includes
#include "HAL/API/BioRadar.h"


namespace HAL { 
	namespace API { 
		namespace BioRadar { 
			namespace Stub { 
	class Base_DBusServer : public ::DBus::InterfaceAdaptor
		{
			public:
				Base_DBusServer(HAL::API::BioRadar::IBase::Ptr impl) :
					::DBus::InterfaceAdaptor("com.HAL.API.BioRadar.Base"), impl(impl){
								register_method(Base_DBusServer, GoMin, _GoMin_mstub);
		register_method(Base_DBusServer, GoMax, _GoMax_mstub);
		register_method(Base_DBusServer, GoRel, _GoRel_mstub);

				}
				virtual ~Base_DBusServer(){
						
				}
				
				static const std::string & dbuspath(){ static std::string val = "/com/HAL/API/BioRadar"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.HAL.API.BioRadar.Base"; return val; }
                
                //::DBus::IntrospectedInterface *introspect() const {
				//	<introspection>
				//}
				
				
			private:
					::DBus::Message _GoMin_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMin();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoMax_mstub(const ::DBus::CallMessage &call){
		try {
		call.reader();
impl->GoMax();
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}
	::DBus::Message _GoRel_mstub(const ::DBus::CallMessage &call){
		try {
		::DBus::MessageIter ri = call.reader();
		int32_t _speed;
ri >> _speed;
impl->GoRel(_speed);
		::DBus::ReturnMessage reply(call);
		return reply;
		} catch (Poco::Exception &ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.message().c_str());
		} catch (std::exception & ex){
			return ::DBus::ErrorMessage(call, DBUS_ERROR_FAILED, ex.what());
		} 
	}

				
				HAL::API::BioRadar::IBase::Ptr impl;
};
 } 
 } 
 } 
 } 



#endif //_BIORADAR_DBUSSERVER_H_
#endif 

