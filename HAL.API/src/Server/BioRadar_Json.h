/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _BIORADAR_JSONSERVER_H_
#define _BIORADAR_JSONSERVER_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "HAL/API/BioRadar.h"


namespace HAL { 
	namespace API { 
		namespace BioRadar { 
			namespace Stub { 
	class BioRadar_JsonServer : public jsonrpc::AbstractServerInterface<BioRadar_JsonServer>
		{
			public:
				BioRadar_JsonServer(jsonrpc::ServiceHandlers & handlers, HAL::API::BioRadar::IBioRadar::Ptr interfaceImpl) :
					jsonrpc::AbstractServerInterface<BioRadar_JsonServer>("HAL.API.BioRadar.BioRadar", handlers), interfaceImpl(interfaceImpl) 
					{
						            this->bindAndAddMethod(new jsonrpc::Procedure("Enable", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL,  NULL), &BioRadar_JsonServer::EnableI);
            this->bindAndAddMethod(new jsonrpc::Procedure("Disable", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL,  NULL), &BioRadar_JsonServer::DisableI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GoMinBase", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL,  NULL), &BioRadar_JsonServer::GoMinBaseI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GoMaxBase", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL,  NULL), &BioRadar_JsonServer::GoMaxBaseI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GoRelBase", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL, "speed",jsonrpc::JSON_REAL, NULL), &BioRadar_JsonServer::GoRelBaseI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GoMinAntenna", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL,  NULL), &BioRadar_JsonServer::GoMinAntennaI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GoMaxAntenna", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL,  NULL), &BioRadar_JsonServer::GoMaxAntennaI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GoRelAntenna", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL, "speed",jsonrpc::JSON_REAL, NULL), &BioRadar_JsonServer::GoRelAntennaI);
            this->bindAndAddMethod(new jsonrpc::Procedure("GetStatus", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_NULL,  NULL), &BioRadar_JsonServer::GetStatusI);

					}
					
					        inline virtual void EnableI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->Enable();
        }

        inline virtual void DisableI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->Disable();
        }

        inline virtual void GoMinBaseI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->GoMinBase();
        }

        inline virtual void GoMaxBaseI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->GoMaxBase();
        }

        inline virtual void GoRelBaseI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->GoRelBase(jsonrpc::Convertor::json2Cpp< double >(request["speed"]));
        }

        inline virtual void GoMinAntennaI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->GoMinAntenna();
        }

        inline virtual void GoMaxAntennaI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->GoMaxAntenna();
        }

        inline virtual void GoRelAntennaI(const ::Json::Value& request, ::Json::Value& response) 
        {
            this->GoRelAntenna(jsonrpc::Convertor::json2Cpp< double >(request["speed"]));
        }

        inline virtual void GetStatusI(const ::Json::Value& request, ::Json::Value& response) 
        {
        	bool tmpvar_baseTouchMin;
bool tmpvar_baseTouchMax;
double tmpvar_basePosition;
bool tmpvar_basePositionError;
bool tmpvar_antennaTouchMin;
bool tmpvar_antennaTouchMax;
double tmpvar_antennaPosition;
bool tmpvar_antennaPositionError;
bool tmpvar_antennaTouch1;
bool tmpvar_antennaTouch2;
bool tmpvar_antennaTouch3;
bool tmpvar_antennaTouch4;
int32_t tmpvar_antennaDistance1;
int32_t tmpvar_antennaDistance2;
int32_t tmpvar_antennaDistance3;
int32_t tmpvar_antennaDistance4;

        	this->GetStatus(tmpvar_baseTouchMin, tmpvar_baseTouchMax, tmpvar_basePosition, tmpvar_basePositionError, tmpvar_antennaTouchMin, tmpvar_antennaTouchMax, tmpvar_antennaPosition, tmpvar_antennaPositionError, tmpvar_antennaTouch1, tmpvar_antennaTouch2, tmpvar_antennaTouch3, tmpvar_antennaTouch4, tmpvar_antennaDistance1, tmpvar_antennaDistance2, tmpvar_antennaDistance3, tmpvar_antennaDistance4);
        	response["baseTouchMin"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_baseTouchMin);
response["baseTouchMax"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_baseTouchMax);
response["basePosition"] = jsonrpc::Convertor::cpp2Json<double >(tmpvar_basePosition);
response["basePositionError"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_basePositionError);
response["antennaTouchMin"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_antennaTouchMin);
response["antennaTouchMax"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_antennaTouchMax);
response["antennaPosition"] = jsonrpc::Convertor::cpp2Json<double >(tmpvar_antennaPosition);
response["antennaPositionError"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_antennaPositionError);
response["antennaTouch1"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_antennaTouch1);
response["antennaTouch2"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_antennaTouch2);
response["antennaTouch3"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_antennaTouch3);
response["antennaTouch4"] = jsonrpc::Convertor::cpp2Json<bool >(tmpvar_antennaTouch4);
response["antennaDistance1"] = jsonrpc::Convertor::cpp2Json<int32_t >(tmpvar_antennaDistance1);
response["antennaDistance2"] = jsonrpc::Convertor::cpp2Json<int32_t >(tmpvar_antennaDistance2);
response["antennaDistance3"] = jsonrpc::Convertor::cpp2Json<int32_t >(tmpvar_antennaDistance3);
response["antennaDistance4"] = jsonrpc::Convertor::cpp2Json<int32_t >(tmpvar_antennaDistance4);

        }


					        void Enable(){
        	 interfaceImpl->Enable();
        }

        void Disable(){
        	 interfaceImpl->Disable();
        }

        void GoMinBase(){
        	 interfaceImpl->GoMinBase();
        }

        void GoMaxBase(){
        	 interfaceImpl->GoMaxBase();
        }

        void GoRelBase(const double & speed){
        	 interfaceImpl->GoRelBase(speed);
        }

        void GoMinAntenna(){
        	 interfaceImpl->GoMinAntenna();
        }

        void GoMaxAntenna(){
        	 interfaceImpl->GoMaxAntenna();
        }

        void GoRelAntenna(const double & speed){
        	 interfaceImpl->GoRelAntenna(speed);
        }

        void GetStatus(bool & baseTouchMin, bool & baseTouchMax, double & basePosition, bool & basePositionError, bool & antennaTouchMin, bool & antennaTouchMax, double & antennaPosition, bool & antennaPositionError, bool & antennaTouch1, bool & antennaTouch2, bool & antennaTouch3, bool & antennaTouch4, int32_t & antennaDistance1, int32_t & antennaDistance2, int32_t & antennaDistance3, int32_t & antennaDistance4){
        	 interfaceImpl->GetStatus(baseTouchMin, baseTouchMax, basePosition, basePositionError, antennaTouchMin, antennaTouchMax, antennaPosition, antennaPositionError, antennaTouch1, antennaTouch2, antennaTouch3, antennaTouch4, antennaDistance1, antennaDistance2, antennaDistance3, antennaDistance4);
        }


			private:
				HAL::API::BioRadar::IBioRadar::Ptr interfaceImpl;
};
 } 
 } 
 } 
 } 



#endif //_BIORADAR_JSONSERVER_H_

