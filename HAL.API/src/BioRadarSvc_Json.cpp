/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
///includes
#include "HAL/API/BioRadarSvc_Json.h"
#include "Client/BioRadar_Json.h"
#include "Server/BioRadar_Json.h"

#include <TBS/Services/Json/JsonServicesImpl.h>

//convertors
namespace jsonrpc {}

namespace HAL { 
	namespace API { 
		namespace BioRadar { 
			namespace Json { 
	   Client::Client(const TBS::Services::JsonClientChannel & ch) : 
	       ch(ch){
	   }
	   Client::~Client(){}
	   HAL::API::BioRadar::IBioRadar & Client::BioRadar(){
   if (!bioradar_) {      bioradar_ =  new HAL::API::BioRadar::Stub::BioRadar_JsonClient(::TBS::Services::convert(ch));
   }   return *bioradar_;
}

	   
	   
	   Server::Server(const TBS::Services::JsonServerChannel & ch) : 
	   	   channel(new TBS::Services::JsonCommChannelHolder(ch)){
		   
	    } 
	    Server::~Server(){}
	    void Server::start(){ 
	   	   channel.cast<TBS::Services::JsonCommChannelHolder>()->interface.StartListening();
	    } 
	    void Server::stop(){ 
	   	   channel.cast<TBS::Services::JsonCommChannelHolder>()->interface.StopListening();
	    } 
	    
	   TBS::Services::IServer::Ptr Server::createBioRadar(HAL::API::BioRadar::IBioRadar::Ptr impl){
   return new TBS::Services::JsonServerImpl<HAL::API::BioRadar::IBioRadar, HAL::API::BioRadar::Stub::BioRadar_JsonServer>(this->channel.cast<TBS::Services::JsonCommChannelHolder>()->interface, impl);
}

 } 
 } 
 } 
 } 



