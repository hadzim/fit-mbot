/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _CAMERA_JSONCLIENT_H_
#define _CAMERA_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "HAL/API/Camera.h"


namespace HAL { 
	namespace API { 
		namespace Camera { 
			namespace Stub { 
       class Camera_JsonClient : public HAL::API::Camera::ICamera {
			public:
				typedef Poco::SharedPtr <Camera_JsonClient> Ptr;
				
				Camera_JsonClient(jsonrpc::AbstractClientConnector* param){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				Camera_JsonClient(const jsonrpc::HttpClientParams & p){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(new jsonrpc::HttpInterfaceClient(HAL::API::Camera::ICamera::name(), p)));
				}
				virtual ~Camera_JsonClient() {
				 }

				
				
 //methods 
				        void Enable(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Enable", pIn);
        }
        void Disable(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Disable", pIn);
        }
        void GoMinEngine(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMinEngine", pIn);
        }
        void GoMaxEngine(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMaxEngine", pIn);
        }
        void GoRelEngine(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("GoRelEngine", pIn);
        }
        void GoMinServo1(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMinServo1", pIn);
        }
        void GoMaxServo1(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMaxServo1", pIn);
        }
        void GoRelServo1(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("GoRelServo1", pIn);
        }
        void GoMinServo2(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMinServo2", pIn);
        }
        void GoMaxServo2(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMaxServo2", pIn);
        }
        void GoRelServo2(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("GoRelServo2", pIn);
        }

				
 //signals 
				//TODO
				
		private: 
				std::auto_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 



#endif //_CAMERA_JSONCLIENT_H_

