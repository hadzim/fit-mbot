/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _BIORADAR_JSONCLIENT_H_
#define _BIORADAR_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
#include <TBS/Services/Json/JsonServices.h>
///includes
#include "HAL/API/BioRadar.h"


namespace HAL { 
	namespace API { 
		namespace BioRadar { 
			namespace Stub { 
       class BioRadar_JsonClient : public HAL::API::BioRadar::IBioRadar {
			public:
				typedef Poco::SharedPtr <BioRadar_JsonClient> Ptr;
				
				BioRadar_JsonClient(jsonrpc::AbstractClientConnector::Ptr param){
					this->client = std::unique_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				virtual ~BioRadar_JsonClient() {
				 }

				
				
 //methods 
				        void Enable(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Enable", pIn);
        }
        void Disable(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Disable", pIn);
        }
        void GoMinBase(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMinBase", pIn);
        }
        void GoMaxBase(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMaxBase", pIn);
        }
        void GoRelBase(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("GoRelBase", pIn);
        }
        void GoMinAntenna(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMinAntenna", pIn);
        }
        void GoMaxAntenna(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMaxAntenna", pIn);
        }
        void GoRelAntenna(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("GoRelAntenna", pIn);
        }
        void GetStatus(MotorInfo & baseMotor, MotorInfo & antenaMotor, std::vector< TouchInfo > & antenaSensors){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            ::Json::Value pOut = this->client->CallMethod("GetStatus", pIn);

baseMotor = jsonrpc::Convertor::json2Cpp<MotorInfo >(pOut["baseMotor"]); 
antenaMotor = jsonrpc::Convertor::json2Cpp<MotorInfo >(pOut["antenaMotor"]); 
antenaSensors = jsonrpc::Convertor::json2Cpp<std::vector< TouchInfo > >(pOut["antenaSensors"]); 

        }

				
 //signals 
				//TODO
				
		private: 
				std::unique_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 



#endif //_BIORADAR_JSONCLIENT_H_

