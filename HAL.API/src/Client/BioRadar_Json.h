/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _BIORADAR_JSONCLIENT_H_
#define _BIORADAR_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "HAL/API/BioRadar.h"


namespace HAL { 
	namespace API { 
		namespace BioRadar { 
			namespace Stub { 
       class BioRadar_JsonClient : public HAL::API::BioRadar::IBioRadar {
			public:
				typedef Poco::SharedPtr <BioRadar_JsonClient> Ptr;
				
				BioRadar_JsonClient(jsonrpc::AbstractClientConnector* param){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				BioRadar_JsonClient(const jsonrpc::HttpClientParams & p){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(new jsonrpc::HttpInterfaceClient(HAL::API::BioRadar::IBioRadar::name(), p)));
				}
				virtual ~BioRadar_JsonClient() {
				 }

				
				
 //methods 
				        void Enable(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Enable", pIn);
        }
        void Disable(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Disable", pIn);
        }
        void GoMinBase(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMinBase", pIn);
        }
        void GoMaxBase(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMaxBase", pIn);
        }
        void GoRelBase(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("GoRelBase", pIn);
        }
        void GoMinAntenna(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMinAntenna", pIn);
        }
        void GoMaxAntenna(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("GoMaxAntenna", pIn);
        }
        void GoRelAntenna(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("GoRelAntenna", pIn);
        }
        void GetStatus(bool & baseTouchMin, bool & baseTouchMax, double & basePosition, bool & basePositionError, bool & antennaTouchMin, bool & antennaTouchMax, double & antennaPosition, bool & antennaPositionError, bool & antennaTouch1, bool & antennaTouch2, bool & antennaTouch3, bool & antennaTouch4, int32_t & antennaDistance1, int32_t & antennaDistance2, int32_t & antennaDistance3, int32_t & antennaDistance4){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            ::Json::Value pOut = this->client->CallMethod("GetStatus", pIn);

baseTouchMin = jsonrpc::Convertor::json2Cpp<bool >(pOut["baseTouchMin"]); 
baseTouchMax = jsonrpc::Convertor::json2Cpp<bool >(pOut["baseTouchMax"]); 
basePosition = jsonrpc::Convertor::json2Cpp<double >(pOut["basePosition"]); 
basePositionError = jsonrpc::Convertor::json2Cpp<bool >(pOut["basePositionError"]); 
antennaTouchMin = jsonrpc::Convertor::json2Cpp<bool >(pOut["antennaTouchMin"]); 
antennaTouchMax = jsonrpc::Convertor::json2Cpp<bool >(pOut["antennaTouchMax"]); 
antennaPosition = jsonrpc::Convertor::json2Cpp<double >(pOut["antennaPosition"]); 
antennaPositionError = jsonrpc::Convertor::json2Cpp<bool >(pOut["antennaPositionError"]); 
antennaTouch1 = jsonrpc::Convertor::json2Cpp<bool >(pOut["antennaTouch1"]); 
antennaTouch2 = jsonrpc::Convertor::json2Cpp<bool >(pOut["antennaTouch2"]); 
antennaTouch3 = jsonrpc::Convertor::json2Cpp<bool >(pOut["antennaTouch3"]); 
antennaTouch4 = jsonrpc::Convertor::json2Cpp<bool >(pOut["antennaTouch4"]); 
antennaDistance1 = jsonrpc::Convertor::json2Cpp<int32_t >(pOut["antennaDistance1"]); 
antennaDistance2 = jsonrpc::Convertor::json2Cpp<int32_t >(pOut["antennaDistance2"]); 
antennaDistance3 = jsonrpc::Convertor::json2Cpp<int32_t >(pOut["antennaDistance3"]); 
antennaDistance4 = jsonrpc::Convertor::json2Cpp<int32_t >(pOut["antennaDistance4"]); 

        }

				
 //signals 
				//TODO
				
		private: 
				std::auto_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 



#endif //_BIORADAR_JSONCLIENT_H_

