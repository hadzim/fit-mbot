/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _MANIPULATOR_JSONCLIENT_H_
#define _MANIPULATOR_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
#include <TBS/Services/Json/JsonServices.h>
///includes
#include "HAL/API/Manipulator.h"


namespace HAL { 
	namespace API { 
		namespace Manipulator { 
			namespace Stub { 
       class Manipulator_JsonClient : public HAL::API::Manipulator::IManipulator {
			public:
				typedef Poco::SharedPtr <Manipulator_JsonClient> Ptr;
				
				Manipulator_JsonClient(jsonrpc::AbstractClientConnector::Ptr param){
					this->client = std::unique_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				virtual ~Manipulator_JsonClient() {
				 }

				
				
 //methods 
				        void Enable(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Enable", pIn);
        }
        void Disable(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Disable", pIn);
        }
        void StartRotation(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("StartRotation", pIn);
        }
        void StopRotation(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("StopRotation", pIn);
        }
        void StartJoint1(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("StartJoint1", pIn);
        }
        void StopJoint1(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("StopJoint1", pIn);
        }
        void StartJoint2(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("StartJoint2", pIn);
        }
        void StopJoint2(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("StopJoint2", pIn);
        }
        void StartHolder(const double & speed){
            ::Json::Value pIn;
            pIn["speed"] = jsonrpc::Convertor::cpp2Json< double >(speed); 

            this->client->CallMethod("StartHolder", pIn);
        }
        void StopHolder(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("StopHolder", pIn);
        }
        void SetHolderThreshold(const double & threshold){
            ::Json::Value pIn;
            pIn["threshold"] = jsonrpc::Convertor::cpp2Json< double >(threshold); 

            this->client->CallMethod("SetHolderThreshold", pIn);
        }
        void GetStatus(MotorInfo & rotation, MotorInfo & joint1, MotorInfo & joint2, MotorInfo & holder){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            ::Json::Value pOut = this->client->CallMethod("GetStatus", pIn);

rotation = jsonrpc::Convertor::json2Cpp<MotorInfo >(pOut["rotation"]); 
joint1 = jsonrpc::Convertor::json2Cpp<MotorInfo >(pOut["joint1"]); 
joint2 = jsonrpc::Convertor::json2Cpp<MotorInfo >(pOut["joint2"]); 
holder = jsonrpc::Convertor::json2Cpp<MotorInfo >(pOut["holder"]); 

        }

				
 //signals 
				//TODO
				
		private: 
				std::unique_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 



#endif //_MANIPULATOR_JSONCLIENT_H_

