/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _NO_DBUS 
#ifndef _BIORADAR_DBUSCLIENT_H_
#define _BIORADAR_DBUSCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Exception.h>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
#include <dbus/dbus-protocol.h>
///includes
#include "HAL/API/BioRadar.h"


namespace HAL { 
	namespace API { 
		namespace BioRadar { 
			namespace Stub { 
       class Base_DBusClient : public ::DBus::InterfaceProxy, public HAL::API::BioRadar::IBase {
			public:
				typedef Poco::SharedPtr <Base_DBusClient> Ptr;
				
				Base_DBusClient() : ::DBus::InterfaceProxy("com.HAL.API.BioRadar.Base"){
					
				}
				virtual ~Base_DBusClient() {
				}

				
				static const std::string & dbuspath(){ static std::string val = "/com/HAL/API/BioRadar"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.HAL.API.BioRadar.Base"; return val; }
				
				
 //methods 
				virtual void GoMin(){		try {
		::DBus::CallMessage call;
		call.member("GoMin");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoMax(){		try {
		::DBus::CallMessage call;
		call.member("GoMax");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoRel(const int32_t & speed){		try {
		::DBus::CallMessage call;
		::DBus::MessageIter wi = call.writer();

		wi << speed;
		call.member("GoRel");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}


		private: 
				
			};
 } 
 } 
 } 
 } 



#endif //_BIORADAR_DBUSCLIENT_H_
#endif

