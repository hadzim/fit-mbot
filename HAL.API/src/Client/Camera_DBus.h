/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _NO_DBUS 
#ifndef _CAMERA_DBUSCLIENT_H_
#define _CAMERA_DBUSCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <Poco/Exception.h>
#include <string>
#include <string.h>
#include <vector>
#include <map>
#include <memory>
#include <dbus-c++/dbus.h>
#include <dbus/dbus-protocol.h>
///includes
#include "HAL/API/Camera.h"


namespace HAL { 
	namespace API { 
		namespace Camera { 
			namespace Stub { 
       class Camera_DBusClient : public ::DBus::InterfaceProxy, public HAL::API::Camera::ICamera {
			public:
				typedef Poco::SharedPtr <Camera_DBusClient> Ptr;
				
				Camera_DBusClient() : ::DBus::InterfaceProxy("com.HAL.API.Camera.Camera"){
					
				}
				virtual ~Camera_DBusClient() {
				}

				
				static const std::string & dbuspath(){ static std::string val = "/com/HAL/API/Camera"; return val; }
				static const std::string & dbusname(){ static std::string val = "com.HAL.API.Camera.Camera"; return val; }
				
				
 //methods 
				virtual void Enable(){		try {
		::DBus::CallMessage call;
		call.member("Enable");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void Disable(){		try {
		::DBus::CallMessage call;
		call.member("Disable");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoMinEngine(){		try {
		::DBus::CallMessage call;
		call.member("GoMinEngine");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoMaxEngine(){		try {
		::DBus::CallMessage call;
		call.member("GoMaxEngine");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoRelEngine(const double & speed){		try {
		::DBus::CallMessage call;
		::DBus::MessageIter wi = call.writer();

		wi << speed;
		call.member("GoRelEngine");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoMinServo1(){		try {
		::DBus::CallMessage call;
		call.member("GoMinServo1");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoMaxServo1(){		try {
		::DBus::CallMessage call;
		call.member("GoMaxServo1");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoRelServo1(const double & speed){		try {
		::DBus::CallMessage call;
		::DBus::MessageIter wi = call.writer();

		wi << speed;
		call.member("GoRelServo1");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoMinServo2(){		try {
		::DBus::CallMessage call;
		call.member("GoMinServo2");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoMaxServo2(){		try {
		::DBus::CallMessage call;
		call.member("GoMaxServo2");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}

virtual void GoRelServo2(const double & speed){		try {
		::DBus::CallMessage call;
		::DBus::MessageIter wi = call.writer();

		wi << speed;
		call.member("GoRelServo2");
		::DBus::Message ret = invoke_method (call);
		} catch (::DBus::Error & err){
			if (strcmp(err.name(), DBUS_ERROR_FAILED) == 0){
				throw ::TBS::Services::RuntimeServiceException(err.message());
			} else {
				throw ::TBS::Services::ChannelServiceException(err.what());
			}
		}
	}


		private: 
				
			};
 } 
 } 
 } 
 } 



#endif //_CAMERA_DBUSCLIENT_H_
#endif

