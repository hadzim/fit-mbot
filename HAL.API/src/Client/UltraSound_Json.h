/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _ULTRASOUND_JSONCLIENT_H_
#define _ULTRASOUND_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
#include <TBS/Services/Json/JsonServices.h>
///includes
#include "HAL/API/UltraSound.h"


namespace HAL { 
	namespace API { 
		namespace UltraSound { 
			namespace Stub { 
       class UltraSound_JsonClient : public HAL::API::UltraSound::IUltraSound {
			public:
				typedef Poco::SharedPtr <UltraSound_JsonClient> Ptr;
				
				UltraSound_JsonClient(jsonrpc::AbstractClientConnector::Ptr param){
					this->client = std::unique_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				virtual ~UltraSound_JsonClient() {
				 }

				
				
 //methods 
				        void Reconnect(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Reconnect", pIn);
        }
        void GetStatus(TouchSensors & frontSensors, TouchSensors & backSensors, bool & isValid){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            ::Json::Value pOut = this->client->CallMethod("GetStatus", pIn);

frontSensors = jsonrpc::Convertor::json2Cpp<TouchSensors >(pOut["frontSensors"]); 
backSensors = jsonrpc::Convertor::json2Cpp<TouchSensors >(pOut["backSensors"]); 
isValid = jsonrpc::Convertor::json2Cpp<bool >(pOut["isValid"]); 

        }

				
 //signals 
				//TODO
				
		private: 
				std::unique_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 



#endif //_ULTRASOUND_JSONCLIENT_H_

