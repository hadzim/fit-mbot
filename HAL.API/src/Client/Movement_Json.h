/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _MOVEMENT_JSONCLIENT_H_
#define _MOVEMENT_JSONCLIENT_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <jsonrpc/rpc.h>
///includes
#include "HAL/API/Movement.h"


namespace HAL { 
	namespace API { 
		namespace Movement { 
			namespace Stub { 
       class Movement_JsonClient : public HAL::API::Movement::IMovement {
			public:
				typedef Poco::SharedPtr <Movement_JsonClient> Ptr;
				
				Movement_JsonClient(jsonrpc::AbstractClientConnector* param){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(param));
				}
				Movement_JsonClient(const jsonrpc::HttpClientParams & p){
					this->client = std::auto_ptr<jsonrpc::Client>(new jsonrpc::Client(new jsonrpc::HttpInterfaceClient(HAL::API::Movement::IMovement::name(), p)));
				}
				virtual ~Movement_JsonClient() {
				 }

				
				
 //methods 
				        void Move(const double & speedLeft, const double & speedRight){
            ::Json::Value pIn;
            pIn["speedLeft"] = jsonrpc::Convertor::cpp2Json< double >(speedLeft); 
pIn["speedRight"] = jsonrpc::Convertor::cpp2Json< double >(speedRight); 

            this->client->CallMethod("Move", pIn);
        }
        void Stop(){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            this->client->CallMethod("Stop", pIn);
        }
        void SetPosition(const int64_t & posLeft, const int64_t & posRight){
            ::Json::Value pIn;
            pIn["posLeft"] = jsonrpc::Convertor::cpp2Json< int64_t >(posLeft); 
pIn["posRight"] = jsonrpc::Convertor::cpp2Json< int64_t >(posRight); 

            this->client->CallMethod("SetPosition", pIn);
        }
        void GetStatus(double & speedLeft, double & speedRight, int64_t & posLeft, int64_t & posRight){
            ::Json::Value pIn;
            pIn = ::Json::nullValue;
            ::Json::Value pOut = this->client->CallMethod("GetStatus", pIn);

speedLeft = jsonrpc::Convertor::json2Cpp<double >(pOut["speedLeft"]); 
speedRight = jsonrpc::Convertor::json2Cpp<double >(pOut["speedRight"]); 
posLeft = jsonrpc::Convertor::json2Cpp<int64_t >(pOut["posLeft"]); 
posRight = jsonrpc::Convertor::json2Cpp<int64_t >(pOut["posRight"]); 

        }

				
 //signals 
				//TODO
				
		private: 
				std::auto_ptr<jsonrpc::Client> client;
			};
 } 
 } 
 } 
 } 



#endif //_MOVEMENT_JSONCLIENT_H_

