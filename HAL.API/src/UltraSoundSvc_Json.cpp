/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
///includes
#include "HAL/API/UltraSoundSvc_Json.h"
#include "Client/UltraSound_Json.h"
#include "Server/UltraSound_Json.h"

#include <TBS/Services/Json/JsonServicesImpl.h>

//convertors
namespace jsonrpc {template<>
class InternalConvertor<HAL::API::UltraSound::TouchInfo> { 
	public:
		static HAL::API::UltraSound::TouchInfo json2Cpp(const Json::Value & val) {
		   using namespace HAL::API::UltraSound;
		   HAL::API::UltraSound::TouchInfo var;
		   		var.distance =  Convertor::json2Cpp< int32_t > (val["distance"]);
			return var;
		}
		static Json::Value cpp2Json(const HAL::API::UltraSound::TouchInfo & val) {
		    using namespace HAL::API::UltraSound;
		    ::Json::Value retval(::Json::objectValue);
		    retval["distance"] = Convertor::cpp2Json< int32_t >(val.distance);
			return retval;
		}
};
template<>
class InternalConvertor<HAL::API::UltraSound::TouchSensors> { 
	public:
		static HAL::API::UltraSound::TouchSensors json2Cpp(const Json::Value & val) {
		   using namespace HAL::API::UltraSound;
		   HAL::API::UltraSound::TouchSensors var;
		   		var.left =  Convertor::json2Cpp< TouchInfo > (val["left"]);
		   		var.right =  Convertor::json2Cpp< TouchInfo > (val["right"]);
			return var;
		}
		static Json::Value cpp2Json(const HAL::API::UltraSound::TouchSensors & val) {
		    using namespace HAL::API::UltraSound;
		    ::Json::Value retval(::Json::objectValue);
		    retval["left"] = Convertor::cpp2Json< TouchInfo >(val.left);
		    retval["right"] = Convertor::cpp2Json< TouchInfo >(val.right);
			return retval;
		}
};
}

namespace HAL { 
	namespace API { 
		namespace UltraSound { 
			namespace Json { 
	   Client::Client(const TBS::Services::JsonClientParams & ch) : 
	       ch(ch){
	   }
	   Client::~Client(){}
	   
	   HAL::API::UltraSound::IUltraSound & Client::UltraSound(){
   if (!ultrasound_) {      ultrasound_ =  new HAL::API::UltraSound::Stub::UltraSound_JsonClient(TBS::Services::createClientConnector(HAL::API::UltraSound::IUltraSound::name(), ch));
   }   return *ultrasound_;
}

	   
	   
	   Server::Ptr Server::createJsonServer(const TBS::Services::JsonServerParams & p){
		   return new Server(new TBS::Services::JsonCommChannelHolder(p));
	   }
	   Server::Ptr Server::createJsonpServer(const TBS::Services::JsonServerParams & p){
		   return new Server(new TBS::Services::JsonpCommChannelHolder(p));
	   }
	   Server::Ptr Server::createWsServer(const TBS::Services::JsonServerParams & p){
		   return new Server(new TBS::Services::WsCommChannelHolder(p));
	   }
	   Server::Ptr Server::createRawServer(const TBS::Services::JsonServerParams & p){
		   return new Server(new TBS::Services::RawCommChannelHolder(p));
	   }
	   
	   
	   Server::Server(TBS::Services::ICommChannelHolder::Ptr ch) : 
	   	   channel(ch){
		   
	    } 
	    Server::~Server(){}
	    void Server::start(){ 
	   	   channel.cast<TBS::Services::AJsonCommChannelHolder>()->getInterface().StartListening();
	    } 
	    void Server::stop(){ 
	   	   channel.cast<TBS::Services::AJsonCommChannelHolder>()->getInterface().StopListening();
	    } 
	    
	   TBS::Services::IServer::Ptr Server::createUltraSound(HAL::API::UltraSound::IUltraSound::Ptr impl){
   return new TBS::Services::JsonServerImpl<HAL::API::UltraSound::IUltraSound, HAL::API::UltraSound::Stub::UltraSound_JsonServer>(this->channel.cast<TBS::Services::AJsonCommChannelHolder>()->getInterface(), impl);
}

 } 
 } 
 } 
 } 



