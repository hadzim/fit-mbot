/**
 * THIS FILE IS GENERATED BY genTool, DO NOT CHANGE IT!!!!!
 */
#ifndef _BIORADAR_H_
#define _BIORADAR_H_

#include <Poco/SharedPtr.h>
#include <Poco/BasicEvent.h>
#include "TBS/Services/Types.h"
#include <string>
#include <vector>
#include <map>

namespace TBS{ namespace Services{ namespace Introspection{ class Class; struct Struct; } } } 




namespace HAL { 
	namespace API { 
		namespace BioRadar { 
	   /** [interface] IBase:  */
       class IBase {
			public:
				typedef Poco::SharedPtr <IBase> Ptr;
				
				virtual ~IBase(){}
				
				static std::string name(){
					static std::string n = "HAL.API.BioRadar.Base";
					return n;
				}
				static const ::TBS::Services::Introspection::Class & introspection();
				
 //methods 
				
		/** 
		  * [method] GoMin: 
		  */ 
		        virtual void GoMin() = 0;

		/** 
		  * [method] GoMax: 
		  */ 
		        virtual void GoMax() = 0;

		/** 
		  * [method] GoRel: 
		  * [in] int32_t speed: -100 to 100
		  */ 
		        virtual void GoRel(const int32_t & speed) = 0;

				
 //signals 
				
				
			};
 } 
 } 
 } 



#endif //_BIORADAR_H_

